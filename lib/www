#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../server')
// const debug = require('debug')('nhsuk-prototype-kit:server')
const http = require('http')
const chalk = require('chalk')
const browserSync = require('browser-sync')
const config = require('../config.js')

let env = process.env.NODE_ENV || 'development'
const useBrowserSync = config.useBrowserSync.toLowerCase()

env = env.toLowerCase()

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '3000')
app.set('port', port)

/**
 * Create HTTP server.
 */

const server = http.createServer(app)

/**
 * Listen on provided port, on all network interfaces.
 */
if (env === 'production' || useBrowserSync === 'false') {
  server.listen(port)
} else {
  server.listen(port - 50, function () {
    browserSync({
      proxy: 'localhost:' + (port - 50),
      port: port,
      ui: false,
      files: [
        './public/**/*.*',
        './app/views/**/*.*',
        './app/routes/**/*.*'
      ],
      ghostmode: false,
      open: false,
      notify: false,
      logLevel: 'error'
    })
  })
}

server.on('error', onError)
server.on('listening', onListening)

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort (val) {
  const port = parseInt(val, 10)

  if (isNaN(port)) {
    // named pipe
    return val
  }

  if (port >= 0) {
    // port number
    return port
  }

  return false
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError (error) {
  if (error.syscall !== 'listen') {
    throw error
  }

  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges')
      process.exit(1)
      break
    case 'EADDRINUSE':
      console.error(bind + ' is already in use')
      process.exit(1)
      break
    default:
      throw error
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening () {
  const addr = server.address()
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port
  console.log(chalk.bgHex('#005eb8').white('\n NHSUK prototype kit now running '))
  console.log('\nVisit http://localhost:'+ addr.port +' in your browser to view\n')
}
